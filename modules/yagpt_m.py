import requests
import json

def getResponse(prompt, headers):
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    response = requests.post(url, headers=headers, json=prompt)
    responseText = response.text
    responseJson = json.loads(responseText)
    try:
        processedResponse = responseJson["result"]["alternatives"][0]["message"]["text"]
        processedResponse = processedResponse.replace("*", "")
        processedResponse = processedResponse.replace("§", "")
    except:
        processedResponse = responseJson["error"]["message"]

    return processedResponse

def requestCompetenciesIndicators(data, request, options):
    prompt = {
        "modelUri": f"gpt://{options[0]}/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": 0.6,
            "maxTokens": "1000"
        },
        "messages": [
            {
                "role": "system",
                "text": "Ты - ассистент, встроенный в текстовое поле приложение. В начале запроса тебе будет дана информация, а именно: \
                        описание компетенции, над которой ведется работа. Далее будет введено, что пользовать хочет увидеть в пункте, \
                        а твоя задача - написать на основе этой информации пункт 'Индикаторы достижения компетенции' для РПД. \
                        Пунктов может быть от 3 до 4. Пункты не должны повторять друг друга по смыслу, не должны быть связаны. Нужно разделить \
                        мысли пользователя по темам и выделть пункты. Тебе нельзя писать ничего кроме ответа, никаких приветствий, сопроводительных слов и подсказок. \
                        Нельзя пытаться идти на контакт с пользователям, нельзя делать дополнительные запросы. Запрещено предисловия и послесловия, \
                        нужно просто выдать желаемый ответ. В идеале пользователь не должен знать о нейросети."
            },
            {
                "role": "user",
                "text": "Способность разрабатывать алгоритмы и программы с использованием современных технологий программирования. Необходимы знание ООП на уровне синтаксиса и семантики, умение использовать IDE и популярные библиотеки, умение ориентироваться в коде и знание политик написания этого кода, знание как спроектировать графический интерфейс для программы."
            },
            {
                "role": "assistant",
                "text": "1. Владеет объектноориентированным языком программирования на уровне знания синтаксиса и семантики, основ стандартной библиотеки.\n2. Использует инструментальные средства программирования (IDE, SDK, API, популярные фреймворки и библиотеки).\n3. Организовывает кодовую базу, ориентируется в существующем коде, демонстрирует знание общепринятых соглашений и политик в области оформления кода.\n4. Проектирует текстовый, программный или графический интерфейс программной системы исходя из ее назначения."
            },
            {
                "role": "user",
                "text": "Способность проектировать и реализовывать архитектуру и дизайн программной системы в соответствии с анализом задачи и требований к ней. Знать основные алгоритмы и структуры данных, оценивать сложность алгоритмов, уметь собирать и анализировать требования к системе и использовать подходящие архитектурные решения на их основе, уметь использовать ООП в своем коде, проектировать с использованием одной технологии/платформы."
            },
            {
                "role": "assistant",
                "text": "1. Демонстрирует знание основных алгоритмов и структур данных, использует на практике простые структуры данных, оценивает сложность алгоритмов.\n2. Собирает, формулирует, систематизирует и анализирует функциональные и нефункциональные требования к информационной системе, выбирает архитектурные решения на их основе.\n3. Создает объектноориентированный код, инкапсулирующий условия задачи, производит декомпозицию задачи и проектирует систему в пределах одной платформы или технологии."
            },
            {
                "role": "user",
                "text": f"{data[0]}. {request}"
            }
        ]
    }
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Api-Key {options[1]}"
    }
    return getResponse(prompt, headers)

def requestCompetenciesResults(data, request, options):
    prompt = {
        "modelUri": f"gpt://{options[0]}/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": 0.1,
            "maxTokens": "1000"
        },
        "messages": [
            {
                "role": "system",
                "text": "Ты - ассистент, встроенный в текстовое поле приложение. В начале запроса тебе будет дана информация, а именно: \
                        название дисциплины, описание компетенции и индикаторы достижения этой компетенции. Тебе нужно написать пункт \
                        'Результаты обучения (умения и знания), соотнесенные с индикаторами достижения компетенции' \
                        Нужно для каждого пункта из Индикаторов написать что нужно Знать и что нужно Уметь студенту.\
                        Тебе нельзя писать ничего кроме ответа, никаких приветствий, сопроводительных слов и подсказок. \
                        Нельзя пытаться идти на контакт с пользователям, нельзя делать дополнительные запросы. Запрещено предисловия и послесловия, \
                        нужно просто выдать желаемый ответ. В идеале пользователь не должен знать о нейросети."
            },
            {
                "role": "user",
                "text": "«Алгоритмы и структуры данных в языке Python»: Способность разрабатывать алгоритмы и программы с использованием современных технологий программирования. 1. Владеет объектноориентированным языком программирования на уровне знания синтаксиса и семантики, основ стандартной библиотеки.\n2. Использует инструментальные средства программирования (IDE, SDK, API, популярные фреймворки и библиотеки).\n3. Организовывает кодовую базу, ориентируется в существующем коде, демонстрирует знание общепринятых соглашений и политик в области оформления кода.\n4. Проектирует текстовый, программный или графический интерфейс программной системы исходя из ее назначения."
            },
            {
                "role": "assistant",
                "text": "Знать:\nобъектно-ориентированный язык программирования Python на уровне знания синтаксиса и семантики, основ стандартной библиотеки.\nУметь:\nопределять на уровне знания синтаксис и семантику, стандартные библиотеки языка Python, необходимые для решения прикладных задач.\n\nЗнать:\nинструментальные средства программирования (IDE, SDK, API, популярные фреймворки и библиотеки.\nУметь:\nразрабатывать программы решения задач с использованием инструментальных средств программирования (IDE, SDK, API, популярных фреймворков и библиотек.\n\nЗнать:\nособенности создания программного кода.\nУметь:\nразрабатывать программный код, ориентироваться в существующем коде, применять знание общепринятых соглашений и политик в области оформления кода.\n\nЗнать:\nосновы проектирования различные виды интерфейса программной системы.\nУметь:\nразрабатывать текстовый, программный или графический интерфейс программной системы исходя из ее назначения."
            },
            {
                "role": "user",
                "text": "«Алгоритмы и структуры данных в языке Python»: Способность проектировать и реализовывать архитектуру и дизайн программной системы в соответствии с анализом задачи и требований к ней. 1. Демонстрирует знание основных алгоритмов и структур данных, использует на практике простые структуры данных, оценивает сложность алгоритмов.\n2. Собирает, формулирует, систематизирует и анализирует функциональные и нефункциональные требования к информационной системе, выбирает архитектурные решения на их основе.\n3. Создает объектноориентированный код, инкапсулирующий условия задачи, производит декомпозицию задачи и проектирует систему в пределах одной платформы или технологии."
            },
            {
                "role": "assistant",
                "text": "Знать:\nосновные алгоритмы и базовые структуры данных.\nУметь:\nразрабатывать алгоритмы для работы со структурами данных, оценивать сложность алгоритмов.\n\nЗнать:\nтребования к информационной системе, архитектурные решения на их основе.\nУметь:\nвыбирать архитектурные решения разработки информационных систем на основе систематизации и анализа функциональных и нефункциональных требований к ним.\n\nЗнать:\nпринципы разработки объектноориентированного кода.\nУметь:\nсоздавать объектно-ориентированный код, производить декомпозицию задачи и проектировать систему в пределах одной платформы или технологии."
            },
            {
                "role": "user",
                "text": f"«{data[0]}»: {data[1]}. {data[2]}. {request}"
            }
        ]
    }
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Api-Key {options[1]}"
    }
    return getResponse(prompt, headers)

def requestThemes(data, request, options):
    prompt = {
        "modelUri": f"gpt://{options[0]}/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": 0.6,
            "maxTokens": "1000"
        },
        "messages": [
            {
                "role": "system",
                "text": "Ты - ассистент, встроенный в текстовое поле приложение. Тебе будет дана информация, а именно: \
                        название дисциплины. Тебе нужно составить список тем по этой дисциплине \
                        Число тем пользователь введет после названия дисциплины. Темы не должны повторять друг друга по смыслу, не должны быть связаны.\
                        Результат представить в виде маркированного списка. Темы идут от легкого к сложному. Не нужно никаких описаний тем, просто их названия. \
                        Тебе нельзя писать ничего кроме ответа, никаких приветствий, сопроводительных слов и подсказок. \
                        Нельзя пытаться идти на контакт с пользователям, нельзя делать дополнительные запросы. Запрещено предисловия и послесловия, \
                        нужно просто выдать желаемый ответ. В идеале пользователь не должен знать о нейросети."
            },
            {
                "role": "user",
                "text": "Алгоритмы и структуры данных в языке Python: 16"
            },
            {
                "role": "assistant",
                "text": "Тема 1. Введение в программирование на Python\nТема 2. Управляющие конструкции, списки и кортежи\nТема 3. Словари, множества и выражения-генераторы\nТема 4. Функции\nТема 5. Работа с файлами и обработка исключительных ситуаций\nТема 6. Модули и пакеты\nТема 7. Продвинутые коллекции\nТема 8. Обзор современных языков программирования\nТема 9. Введение в объектно-ориентированное программирование\nТема 10. Объектно-ориентированное программирование в Python\nТема 11. Введение в функциональное программирование\nТема 12. Функциональное программирование в Python\nТема 13. Структуры данных: массивы, стеки, очереди, списки\nТема 14. Алгоритмы поиска и сортировки\nТема 15. Структуры данных: деревья\nТема 16. Хеш-таблицы"
            },
            {
                "role": "user",
                "text": "Философия: 9"
            },
            {
                "role": "assistant",
                "text": "Тема 1.  Предмет, структура и функции философии.\nТема 1.  Предмет, структура и функции философии.\nТема 3. Гносеология\nТема 4. Аксиология\nТема 5. Антропология\nТема 6. Социальная философия\nТема 7. Этика\nТема 8. Эстетика\nТема 9. Практическая философия"
            },
            {
                "role": "user",
                "text": f"{data[0]}: {request}"
            }
        ]
    }
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Api-Key {options[1]}"
    }
    return getResponse(prompt, headers)

def requestThemeDescription(data, request, options):
    prompt = {
        "modelUri": f"gpt://{options[0]}/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": 0.6,
            "maxTokens": "1000"
        },
        "messages": [
            {
                "role": "system",
                "text": "Ты - ассистент, встроенный в текстовое поле приложение. Тебе будет дана информация, а именно: \
                        название дисциплины, название темы. Тебе нужно написать описание этой темы. \
                        Описание должно раскрывать какие-то ключевые части по этой теме, которые необходимо изучить.\
                        В ответ отправить только описание темы, без названия.\
                        Тебе нельзя писать ничего кроме ответа, никаких приветствий, сопроводительных слов и подсказок. \
                        Нельзя пытаться идти на контакт с пользователям, нельзя делать дополнительные запросы. Запрещено предисловия и послесловия, \
                        нужно просто выдать желаемый ответ. В идеале пользователь не должен знать о нейросети."
            },
            {
                "role": "user",
                "text": "Алгоритмы и структуры данных в языке Python: Тема 6. Модули и пакеты"
            },
            {
                "role": "assistant",
                "text": "Модули и пакеты в Python: подход к структурированию программного кода с помощью модулей и пакетов. Синтаксис импортирования в Python. Создание и работа с пакетами в Python. Повторная загрузка модулей.\nНаписание и запуск скриптов на Python. Установка модулей из глобального репозитария."
            },
            {
                "role": "user",
                "text": "Алгоритмы и структуры данных в языке Python: Тема 16. Хеш-таблицы"
            },
            {
                "role": "assistant",
                "text": "Абстрактный тип данных – ассоциативный массив. Таблица с прямой адресацией. Хеш-таблица, хеш-функция: метод деления; метод MAD. Полиномиальная хеш-функция.\nФункция hash в Python.\nМетоды разрешения коллизий."
            },
            {
                "role": "user",
                "text": f"{data[1]}: {data[0]}. {request}"
            }
        ]
    }
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Api-Key {options[1]}"
    }
    print(f"{data[1]}: {data[0]}. {request}")
    return getResponse(prompt, headers)

def requestSeminarQuestions(data, request, options):
    prompt = {
        "modelUri": f"gpt://{options[0]}/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": 0.4,
            "maxTokens": "1000"
        },
        "messages": [
            {
                "role": "system",
                "text": "Ты - ассистент, встроенный в текстовое поле приложение. Тебе будет дана информация, а именно: \
                        название темы, описание темы. Тебе нужно написать перечень вопросов для обсуждения на семинарских занятиях. \
                        Вопросы не должны повторять друг друга по смыслу.\
                        Тебе нельзя писать ничего кроме ответа, никаких приветствий, сопроводительных слов и подсказок. \
                        Нельзя пытаться идти на контакт с пользователям, нельзя делать дополнительные запросы. Запрещено предисловия и послесловия, \
                        нужно просто выдать желаемый ответ. В идеале пользователь не должен знать о нейросети."
            },
            {
                "role": "user",
                "text": "Тема 1. Введение в программирование на Python. Общая информация о языке Python. История языка программирования, его связь с другими языками программирования, распространенность Python и основные сферы его применения. Знакомство с первыми примерами кода на Python. Философия Python. Базовая информация о языке Python. Основные типы данных. Основные числовые типы данных и операции над ними. Математические операции над числовыми типами данных. Преобразование типов данных. Переменные и специфика их объявления. Статическая и динамическая типизация. Работа с переменными. Управление памятью и сборка мусора в Python. Именование переменных. Работа со строками: создание строк, специальные символы. Индексирование строк, получение срезов строк. Основные функции для работы со строками. Вывод на экран (работа с функцией print) и форматирование строк. Различные подходы к форматированию строк, форматирование с помощью fстрок. Расширенное форматирование в Python."
            },
            {
                "role": "assistant",
                "text": "Установка Python, установка дистрибутива Anaconda. Работа в интерактивном режиме интерпретатора. Интерактивная оболочка IPython notebook: принципы работы и применения. "
            },
            {
                "role": "user",
                "text": "Тема 4. Функции. Функции в Python: общая семантика. Создание функции и ее вызов. Расположение определений функций. Анонимные функции в Python. Необязательные параметры функций и сопоставление по ключам. Возвращение нескольких значений из функции. Распаковка и запаковка параметров функции. Аннотации и документирование функций. Глобальные и локальные переменные."
            },
            {
                "role": "assistant",
                "text": "Создание функций, область видимости переменной, передача аргументов в функцию. Лямбда-функции."
            },
            {
                "role": "user",
                "text": f"{data[0]}. {data[1]}. {request}"
            }
        ]
    }
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Api-Key {options[1]}"
    }
    return getResponse(prompt, headers)

def requestHomeworkQuestions(data, request, options):
    prompt = {
        "modelUri": f"gpt://{options[0]}/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": 0.3,
            "maxTokens": "1000"
        },
        "messages": [
            {
                "role": "system",
                "text": "Ты - ассистент, встроенный в текстовое поле приложение. Тебе будет дана информация, а именно: \
                        название темы, описание темы. Тебе нужно написать перечень вопросов для самостоятельного изучения. \
                        Вопросы не должны повторять друг друга по смыслу. Важно: темы должны касаться необычных вопросов и особенностей.\
                        Следует указать не больше 2-3 вопросов. Нельзя повторяться с тем, что уже было изучено на семинаре.\
                        Тебе нельзя писать ничего кроме ответа, никаких приветствий, сопроводительных слов и подсказок. \
                        Нельзя пытаться идти на контакт с пользователям, нельзя делать дополнительные запросы. Запрещено предисловия и послесловия, \
                        нужно просто выдать желаемый ответ. В идеале пользователь не должен знать о нейросети."
            },
            {
                "role": "user",
                "text": "Тема 1. Введение в программирование на Python. Общая информация о языке Python. История языка программирования, его связь с другими языками программирования, распространенность Python и основные сферы его применения. Знакомство с первыми примерами кода на Python. Философия Python. Базовая информация о языке Python. Основные типы данных. Основные числовые типы данных и операции над ними. Математические операции над числовыми типами данных. Преобразование типов данных. Переменные и специфика их объявления. Статическая и динамическая типизация. Работа с переменными. Управление памятью и сборка мусора в Python. Именование переменных. Работа со строками: создание строк, специальные символы. Индексирование строк, получение срезов строк. Основные функции для работы со строками. Вывод на экран (работа с функцией print) и форматирование строк. Различные подходы к форматированию строк, форматирование с помощью fстрок. Расширенное форматирование в Python."
            },
            {
                "role": "assistant",
                "text": "Среда программирования. Использование документации."
            },
            {
                "role": "user",
                "text": "Тема 4. Функции. Функции в Python: общая семантика. Создание функции и ее вызов. Расположение определений функций. Анонимные функции в Python. Необязательные параметры функций и сопоставление по ключам. Возвращение нескольких значений из функции. Распаковка и запаковка параметров функции. Аннотации и документирование функций. Глобальные и локальные переменные."
            },
            {
                "role": "assistant",
                "text": "Оперирование вложенными списками, копирование списков, некоторые операции над списками."
            },
            {
                "role": "user",
                "text": f"{data[0]}. {data[1]}. {request}"
            }
        ]
    }
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Api-Key {options[1]}"
    }
    return getResponse(prompt, headers)

def requestHintThemesHours(data, request, options):
    prompt = {
        "modelUri": f"gpt://{options[0]}/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": 0.25,
            "maxTokens": "1000"
        },
        "messages": [
            {
                "role": "system",
                "text": "Ты - ассистент, встроенный в текстовое поле приложение. Тебе будет дана информация, а именно: \
                        список тем по дисциплине и выделенные на дисциплину часы. Твоя задача - дать развернутый ответ, оценивающий\
                        сложность освоения и объем темы, соориентировать пользователя на какие темы следует выделить больше часов на лекции, \
                        семинары, самостоятельную работу. Не нужно писать часов, требуется просто общий ориентиры - больше, меньше.\
                        Нельзя пытаться идти на контакт с пользователям, нельзя делать дополнительные запросы. Запрещено предисловия и послесловия, \
                        нужно просто выдать желаемый ответ. В идеале пользователь не должен знать о нейросети."
            },
            {
                "role": "user",
                "text": "Тема 1. Введение в программирование на Python. Тема 2. Управляющие конструкции, списки и кортежи. Тема 3. Словари, множества и выражения-генераторы. Тема 4. Функции. Тема 5. Работа с файлами и обработка исключительных ситуаций. Тема 6. Модули и пакеты. Тема 7. Продвинутые коллекции. Тема 8. Обзор современных языков программирования. Тема 9. Введение в объектно-ориентированное программирование. Тема 10. Объектно-ориентированное программирование в Python. Тема 11. Введение в функциональное программирование. Тема 12. Функциональное программирование в Python. Тема 13. Структуры данных: массивы, стеки, очереди, списки. Тема 14. Алгоритмы поиска и сортировки. Тема 15. Структуры данных: деревья. Тема 16. Хеш-таблицы. Лекции: 32 часов, семинары: 68 часов, самостоятельная работа: 188 часов."
            },
            {
                "role": "assistant",
                "text": "Вот мои рекомендации:\nБольше времени на лекции:\nВведение в программирование на Python (Тема 1) - Это основополагающая тема, требующая подробного объяснения основных концепций языка.\nУправляющие конструкции, списки и кортежи (Тема 2) - Эти конструкции являются фундаментальными элементами языка, и их понимание критически важно для развития навыков программирования.\nФункции (Тема 4) - Понимание функций и их использование требует времени и практики для освоения.\nБольше времени на семинары:\nОбъектно-ориентированное программирование в Python (Тема 10) - Практические упражнения и демонстрации могут значительно помочь студентам освоить эту сложную концепцию.\nСтруктуры данных: деревья (Тема 15) - Сложность их реализации и применения требует интерактивного обучения и практических примеров.\nБольше времени на самостоятельную работу:\nПродвинутые коллекции (Тема 7) - Самостоятельная работа позволит студентам более глубоко изучить различные типы коллекций и их применение.\nОбработка исключительных ситуаций (Тема 5) - Это важная навыковая часть программирования, требующая практики и экспериментов для понимания различных сценариев.\nОбщие рекомендации:\nТемы, связанные с базовыми конструкциями языка (например, Темы 1-4), могут потребовать большего количества времени на освоение, так как они являются фундаментальными для дальнейшего изучения.\nБолее сложные темы, такие как объектно-ориентированное программирование (Темы 9-10) и некоторые структуры данных (например, деревья в Теме 15), могут требовать более длительного времени на практическое применение и углубленное изучение.\nСеминары должны быть нацелены на практическое применение изученных концепций, что особенно важно для более сложных тем.\nУчитывая эти рекомендации, студенты смогут более эффективно усваивать материал и развивать свои навыки программирования."
            },
            {
                "role": "user",
                "text": "Тема 1. Основы математики: определения, обозначения, операции. Тема 2. Числа и операции над ними: сложение, вычитание, умножение и деление. Тема 3. Полиномы и линейные уравнения. Тема 4. Векторные пространства. Тема 5. Матрицы и определители. Тема 6. Системы линейных уравнений. Тема 7. Аналитическая геометрия: векторы и координаты. Тема 8. Дифференциальное и интегральное исчисление.  Тема 9. Ряды: ряды Фурье и другие. Тема 10. Теория вероятностей. Лекции: 50 часов, семинары: 68 часов, самостоятельная работа: 242 часов."
            },
            {
                "role": "assistant",
                "text": "Вот мои рекомендации:\nБольше времени на лекции:\nОсновы математики (Тема 1) - Это фундаментальная тема, которая включает в себя базовые математические концепции и терминологию.\nЧисла и операции над ними (Тема 2) - Эта тема также важна для понимания основ математики и требует времени на разъяснение основных арифметических операций.\nБольше времени на семинары:\nСистемы линейных уравнений (Тема 6) - Практические задания и решение задач помогут студентам лучше понять и применить концепции систем линейных уравнений.\nАналитическая геометрия (Тема 7) - Интерактивные занятия и практические примеры помогут студентам освоить основные понятия аналитической геометрии.\nБольше времени на самостоятельную работу:\nТеория вероятностей (Тема 10) - Эта тема может быть сложной для понимания, поэтому студентам потребуется время для изучения и применения теоретических концепций на практике.\nДифференциальное и интегральное исчисление (Тема 8) - Эти разделы математики требуют много практики и самостоятельного изучения для полного освоения.\nОбщие рекомендации:\nТемы, связанные с базовыми математическими концепциями (например, Темы 1-3), могут потребовать большего количества времени на освоение, так как они являются фундаментальными для дальнейшего изучения математики.\nБолее сложные темы, такие как теория вероятностей (Тема 10) и дифференциальное и интегральное исчисление (Тема 8), требуют большего количества времени на самостоятельную работу и изучение дополнительной литературы.\nСеминары должны быть нацелены на практическое применение изученных математических концепций, что поможет студентам лучше усвоить материал.\nС учетом этих рекомендаций студенты смогут более эффективно изучать математику и развивать свои навыки в этой области."
            },
            {
                "role": "user",
                "text": f"{data[0]}. {data[1]}"
            }
        ]
    }
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Api-Key {options[1]}"
    }
    return getResponse(prompt, headers)

